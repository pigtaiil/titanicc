# -*- coding: utf-8 -*-
"""TITANIC

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PuqgPIaiY9c2J2ehTagVgvQH-eu5Hls9
"""

import pandas as pd

df = pd.read_csv("train.csv")

df.groupby(["Sex", "Embarked"]).size()

df.Fare.min()

df.Fare.max()

df.Pclass #OR df["Pclass"]

df.info()

df.Sex.value_counts()

df.head(5)

df.tail(5)

df.Cabin.unique()

df.Cabin.nunique()

df[(df.Pclass == 3)].Fare.mean()

df[(df.Pclass == 2)].Fare.std()

df[(df.Pclass == 1)].Fare.sum()

# 0 = passed away 
# 1 = survived
#no. of people who ded acc. to their age
df[df.Survived == 0].Age.value_counts().sort_index()

len(df[(df.Sex == "female") & (df.Survived == 1)])

len([(df.Age <= 20) & (df.Sex == "female") & (df.Survived == 1)])

len([(df.Age <= 70) & (df.Sex == "female") & (df.Survived == 1)])

df.groupby("Pclass").Survived.value_counts()

df[(df.Pclass == 3) & (df.Survived == 1)].Sex.value_counts()

df[(df.Pclass == 2) & (df.Survived == 1)].Sex.value_counts()

df.groupby("Sex").Age.mean()

df.groupby("Pclass").Fare.sum()

df.groupby("Sex").Survived.value_counts()

df.loc[6]

df.iloc[6]

df["ageX2"] = (df.Age*2)
df

#ALTERNATIVE
df["prod"] = df.Age.apply(lambda x: x*2*3)
df

df.columns

df.columns.nunique()

df.columns.unique()

len(df[df.Age.isnull()])

Sex_counts = df.Sex.value_counts()
Sex_counts.plot(kind = "pie")

df.groupby("Sex").plot(kind="hist", bins=25, alpha=0.6, legend=True)

df.groupby(["Pclass", "Sex"]).size()

df.groupby("Sex").size()

df[df.Sex.isin(["female"])]

len(df[~df.Sex.isin(["female"])])

new_df = df[df.Pclass.isin([1, 2, 3])]

new_df.groupby("Pclass").Fare.plot(kind="hist", bins=3, legend=True, alpha=0.4)
plt.xlabel("Fare")
plt.ylabel("Counts")
plt.title("Fares by class")

fares = pd.cut(df.Fare,bins=10).value_counts().sort_index()
fares

pd.cut(df.Fare, bins=9).value_counts().sort_index().plot(kind="bar")

Sex_counts = df.Sex.value_counts()
Sex_counts.plot(kind = "bar")
plt.title("Sex of passengers")
plt.ylabel("Number of people")
#or
#df.Sex_counts.value_counts().plot(kind="bar")

Age_count = df[(df.Age >= 30) & (df.Age <= 35)].Age.value_counts()
Age_count.sort_index().plot(kind = "pie")

import pandas as pd

df = pd.read_csv("train.csv")

import matplotlib.pyplot as plt

df.Age.plot(kind = "bar")
plt.title("Age of passengers")
plt.ylabel("Frequency")
plt.xlabel("Ages")

#pd.cut(df.Fare.plot, kind= "hist", bins=10).value_counts().sort_index()
df.Fare.plot(kind="hist", bins=5, alpha=0.4)

df.Fare.plot(kind="kde")

fig = plt.figure(figsize=(15, 10))
df.Age.value_counts().sort_index().plot(kind="bar")

#last name nikalne
def charac_name(name):
  ans = name.split()[0].replace(",", "")
  return ans
df["Name"].apply(charac_name)

#name ko first character
def charac_name(name):
  ans = name.split()[2][0]
  return ans
df["Name"].apply(charac_name).value_counts()

#percentage of males and females
(df.Sex.value_counts(normalize=True)*100).apply(lambda x: f"{round(x,2)}%")

#percentage of people who survived
print ("1 = survived")
print ("0 = passed away")
(df.Survived.value_counts(normalize=True)*100).apply(lambda x: f"{round(x,2)}%")

#how many males survived? 
df[(df.Survived == 1) & (df.Sex == "male")].Survived.value_counts()

#how many females did not survive?
#df[(df.Survived == 0) & (df.Sex == "female")].Survived.value_counts()
df[~(df.Survived == 1) & (df.Sex == "female")].Survived.value_counts()

df.groupby(["Sex", "Survived"]).size()

#what is the age of the youngest person who survived?
df[(df.Survived == 1)].Age.min()

#what is the age of the oldest person who survived?
df[(df.Survived == 1)].Age.max()

#what is the average age of females who survived?
df[(df.Survived == 1) & (df.Sex == "female")].Age.mean()

import matplotlib.pyplot as plt

plt.style.available

import seaborn as sns

sns.countplot(x="Sex", data=df, hue= "Survived") #hue bhaneko groupby jasto

students = {
    "id" : [1,2,3,4,5],
    "name" : ["a", "b", "c", "d", "e"]
}
teachers = {
    "id" : [1,2,3,4,5],
    "names" : ["U", "V", "W", "X", "Y"]
}
stu_df = pd.DataFrame(students)
stu_df

